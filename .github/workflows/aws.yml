name: Dana_run
on:
 workflow_dispatch: {}
 push:
   branches:
    - "release"
    - "staging"
env:
  AWS_REGION: us-east-1                        
  ECR_REPOSITORY: assignment21jul-duplicate             
  ECS_SERVICE: assignment-service
  ECS_CLUSTER: assignment-cluster
  ECS_TASK_DEFINITION: assignment-task.json                                           
  CONTAINER_NAME: assignment-container
  
permissions:
  contents: read

jobs:
 pre_build:
    runs-on: ubuntu-latest
    steps:
      - name: check out the code
        uses: actions/checkout@v3
      
      - name: list directory contents
        run: ls -lart
        
      - uses: actions/upload-artifact@master
        with:
          name: pre_build-artifact
          path: .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: remove previous one2oneapp-latest image for re-build
        run: aws ecr batch-delete-image --repository-name $ECR_REPOSITORY --image-ids imageTag="one2oneapp-latest"
 test:
    needs : pre_build
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false      
      matrix:
        language: [ 'javascript' ]
    steps:     
     - name: check out the code
       uses: actions/checkout@v3
        
     - name: Initialize CodeQL
       uses: github/codeql-action/init@v2
       with:
         queries: +security-extended
         languages: ${{ matrix.language }}

     - name: Perform CodeQL Analysis
       uses: github/codeql-action/analyze@v1
       
 build:
   needs: test
   runs-on: ubuntu-latest
   steps:
     - name: check out the code
       uses: actions/checkout@v3
        
     - name: configure node.js for compiling
       uses: actions/setup-node@v1
       with:
         node-version:  16.x                   
              
     - name: Install dependencies               
       run: npm ci
       
     - name: compile the node js application
       run: npm install
       
     - name: Configure AWS credentials
       uses: aws-actions/configure-aws-credentials@v1
       with:
         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         aws-region: ${{ env.AWS_REGION }}

     - name: Login to Amazon ECR
       id: login-ecr
       uses: aws-actions/amazon-ecr-login@v1

     - name: Build, tag, and push image to Amazon ECR
       id: build-image
       env:
         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
         IMAGE_TAG: "one2oneapp-latest"
       run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

 release_staging_deploy:
   needs: build
   runs-on: ubuntu-latest
   steps:
     - name: check out the code
       uses: actions/checkout@v3
        
     - name: Configure AWS credentials
       uses: aws-actions/configure-aws-credentials@v1
       with:
         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         aws-region: ${{ env.AWS_REGION }}

     - name: Login to Amazon ECR
       id: login-ecr
       uses: aws-actions/amazon-ecr-login@v1
     
     - name: Scan Docker image
       id: docker-scan
       run: aws ecr start-image-scan --repository-name $ECR_REPOSITORY --image-id imageTag="one2oneapp-latest" --region us-east-1
         
     - name: total number of vulnerabilities 
       run: echo "${{ steps.docker-scan.outputs.total }} total vulnerabilities."

     - name: retag and push image to Amazon ECR with final image id. Final image id 
       id: retag-image
       env:
         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
         IMAGE_TAG: "release-one2oneapp-${{ github.sha }}"
       run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker pull $ECR_REGISTRY/$ECR_REPOSITORY:"one2oneapp-latest"
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:"one2oneapp-latest" $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

     - name: Fill in the new image ID in the Amazon ECS task definition
       id: task-def
       uses: aws-actions/amazon-ecs-render-task-definition@v1
       with:
         task-definition: ${{ env.ECS_TASK_DEFINITION }}
         container-name: ${{ env.CONTAINER_NAME }}
         image: ${{ steps.retag-image.outputs.image }} 
 
     - name: Deploy Amazon ECS task definition
       uses: aws-actions/amazon-ecs-deploy-task-definition@v1
       with:
         task-definition: ${{ steps.task-def.outputs.task-definition }}
         service: ${{ env.ECS_SERVICE }}
         cluster: ${{ env.ECS_CLUSTER }}
         wait-for-service-stability: true
